# Test the L language.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

test proc-1.0 {Test L function definition.} -body {
#pragma language L
main(void) {
        puts("foo");
}
#pragma end
main  
} -output "foo\n"

test var-1.0 {Test L variable assignment and reference} -body {
#pragma language L
main(void)
{
	string s;
        s = "Hello";
	puts(s);
}
#pragma end
main
} -output "Hello\n"

test pragma-1.0 {Test pragma parsing} -body {
# These are some Tcl Comments
#pragma language L
main(void)
{
	puts("worked");
}

#pragma end
# More comments
main
} -output "worked\n"

test pragma-2.0 {Test failure path in pragma parsing} -body {
#pragma language foo
main(void)
{
	puts("worked");
}

#pragma end
main
} -returnCodes {error} -result {unknown language}

test pragma-3.0 {Test lack of end pragma} -body {
#pragma language L
main(void)
{
	puts("worked");
}
} -returnCodes {error} -result {unfinished pragma}

test decl-1.0 {Variable and parameter declaration syntax} -body {
#pragma language L
fun1() { }
fun2(void) { }
void fun3() { }
int fun4() { }
fun5(int foo) { }
hash fun6(hash foo, hash bar[], hash baz[23]) { }
void fun7(int foo, float bar, hash baz, string quux, poly quuux, var quuuux) { }
void fun8() {
        int foo, bar[], baz[84];
        string foo1[19], mani[], padmi = "hum";
        hash whee;
        if (0) {
                int bleh = 5;
        } else {
                if (1) {
                        poly padmi = "om";
                        puts(padmi);
                }
        }
}
#pragma end
fun8
} -output "om\n";

test decl-1.1 {Hairy literal hash syntax in initializers} -body {
#pragma language L
initmewoo() {
        hash h = ( "key" => "val", "key2" => "val" );
}
#pragma end
}

test decl-1.2 {Undeclared variable error} -body {
#pragma language L
undecl() {
        foo = "bar";
        puts(cheese);
}
#pragma end
undecl
} -returnCodes error -result {L Error: Undeclared variable: foo on line 2
L Error: Undeclared variable: cheese on line 3
}


test decl-1.3 {Variable shadowing} -body {
#pragma language L
shadow() {
        int foo = 1;
        if (1) {
                int foo = 2;
                puts(foo);
        } 
        puts(foo);
}
#pragma end
shadow
} -output "2\n1\n";

# cleanup
::tcltest::cleanupTests
return

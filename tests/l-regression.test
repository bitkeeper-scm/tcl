# Test to make sure that bugs don't creep back into L
# Copyright (c) 2007 BitMover, Inc.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}


test empty-1.0 {empty code blocks} -body {
#lang L
empty_1_0() {
} 
#lang tcl
empty_1_0
} 

test empty-1.1 {empty code blocks with some control flow} -body {
#lang L
empty_1_1() {
        /* note that none of these conditions is true, 
           so no code is executed */
        unless(1) {
                puts("1 broken");
        } else if (0) {
                puts("1.1 broken");
        } else unless(1) {
                puts("1 working");
        }
} 
#lang tcl
empty_1_1
} 

test values-1.0 {the values of struct increment and assignment} -body {
#lang L
struct values_1_0 {
  int clicks;
  string value;
};

values_1_0() {
  struct values_1_0 main_entry;
  puts(main_entry.clicks = 0);
  puts(++main_entry.clicks);
}
#lang tcl
values_1_0
} -output "0\n1\n"


test multi-dimensional-1.0 {move[state][read_symbol] was being evaluated as
move[state][state[read_symbol]][read_symbol], or thereabouts, because the AST
was built in an ambiguous way.} -body {
#lang L
turing(int step, int state, int tape[], int pos) {
    int write_symbol[5][2], move[5][2], new_state[5][2], read_symbol;

    write_symbol[0][1] = 0;  move[0][1] = 1;  new_state[0][1] = 1;
    write_symbol[1][1] = 1;  move[1][1] = 1;  new_state[1][1] = 1;
    write_symbol[1][0] = 0;  move[1][0] = 1;  new_state[1][0] = 2;
    write_symbol[2][0] = 1;  move[2][0] = 0;  new_state[2][0] = 3;
    write_symbol[2][1] = 1;  move[2][1] = 1;  new_state[2][1] = 2;
    write_symbol[3][1] = 1;  move[3][1] = 0;  new_state[3][1] = 3;
    write_symbol[3][0] = 0;  move[3][0] = 0;  new_state[3][0] = 4;
    write_symbol[4][1] = 1;  move[4][1] = 0;  new_state[4][1] = 4;
    write_symbol[4][0] = 1;  move[4][0] = 1;  new_state[4][0] = 0;

    read_symbol = tape[pos];
    puts(append("", "  ", step, "\ts", state + 1, "\t", dump_tape(tape)));

    // state 0 and symbol 0 means to halt
    if (read_symbol + state) {
        tape[pos] = write_symbol[state][read_symbol];
        if (move[state][read_symbol]) {
            pos++;
        } else {
            pos--;
        }
        turing(step + 1, new_state[state][read_symbol], tape, pos);
    } else {
        puts("-- halt --");
    }
}

/* dump the tape to a string */
dump_tape(int tape[]) {
    return format("%d %d %d %d %d",
                  tape[0],  tape[1], tape[2], tape[3], tape[4]);
}

multi_dimensional_1_0() {
    int tape[5];

    tape[0] = 1; tape[1] = 1; tape[2] = 0; tape[3] = 0; tape[4] = 0;
    puts("Step\tState\tTape");
    puts("- - - - - - - - - -");
    turing(1, 0, tape, 0);
}
#lang tcl
multi_dimensional_1_0
} -output {Step	State	Tape
- - - - - - - - - -
  1	s1	1 1 0 0 0
  2	s2	0 1 0 0 0
  3	s2	0 1 0 0 0
  4	s3	0 1 0 0 0
  5	s4	0 1 0 1 0
  6	s5	0 1 0 1 0
  7	s5	0 1 0 1 0
  8	s1	1 1 0 1 0
  9	s2	1 0 0 1 0
  10	s3	1 0 0 1 0
  11	s3	1 0 0 1 0
  12	s4	1 0 0 1 1
  13	s4	1 0 0 1 1
  14	s5	1 0 0 1 1
  15	s1	1 1 0 1 1
-- halt --
}

test references-1.0 {magic -variable should only affect next pointer} -body {
#lang L
int
references_1_0()
{
	int	a, b, c;

	a = 5;
	printf("%s - %s - %s - %s", variable: &a, &b, &c);
}
#lang tcl
references_1_0
} -output {-variable - ::Lptr::1 a - b - c}



test initializers-1.0 {initialize a whole array at once} -body {
#lang L
initializers_1_1() {
  string foo[] = initializers_1_1_returnarray();

  printf("foo[0] is %s\n", foo[0]);
  printf("foo[1] is %s\n", foo[1]);
}

poly initializers_1_1_returnarray() {
  return "foo bar";
}
#lang tcl
initializers_1_1
} -output "foo\[0\] is foo\nfoo\[1\] is bar\n"

test cast-1.0 {don't segfault when casting to a string} -body {
#lang L
cast_1_0() {
	puts((string)"asdf");
}
#lang tcl
cast_1_0
} -output "asdf\n"


test autoextend-1.0 {autoextending arrays of hashes don't work} -body {
#lang L
autoextend_1_0() {
	hash h[];

	h[0]{"asdf"} = "foo";
	puts(h);
}
#lang tcl
autoextend_1_0
} -returnCodes {error} -match glob -result \
	"*:4: L Error: Autoextending in multiple dimensions is not implemented yet\n"


test typecheck-1.0 {typechecker segfaults on unop check that must be queued} -body {
#lang L
typecheck_1_0() {
	// note the -
	foo(-bar());
}
int bar() {
	return 22;
}
string foo(string foo) {
	return foo;
}
#lang tcl
typecheck_1_0
} -returnCodes {error} -match glob -result \
    "*:3: L Error: type error, want L_TYPE_STRING, got L_TYPE_INT\n"

test decl-1.0 {don't drop array dimensions from typedef when declaring multiple variables} -body {
#lang L
typedef int atype[2];
decl_1_0() {
	atype foo[3], bar;
	puts(foo);
	puts(bar);
}
#lang tcl
decl_1_0
} -output "{0 0} {0 0} {0 0}\n0 0\n"

test if-1.0 {jump target is wrong when else block gets too big} -body {
#lang L -nowarn
if_1_0() {
	string w = ".asdf";
	string b = "${w}.b", btm = "${w}.btm"; /* XXX use properties */
	string lbox = "${btm}.lbox", vs = "${btm}.vs", e = "${w}.e";
	if (0) {
		puts("wicky wicky2");
		wm("withdraw", btm);
		b("configure", relief: "raised");
	} else {
		string width, h, h1, x, y;
		puts("wicky wicky3");
		width = winfo("width", e);
		h = winfo("reqheight", w);
		h1 = winfo("reqheight", btm);
		x = winfo("rootx", w);
		y = winfo("rooty", w);
		/* XXX, wtf? */
		puts(width);
		puts(h1);
		puts(x);
	}
}

string winfo(string a, string b) {return 42;}
#lang tcl
if_1_0
} -output {wicky wicky3
42
42
42
}

test scope-1.0 {if a global is first used as a reference, it gets erroneously created twice} -body {
#lang L
string avar = "foo";
scope_1_0() {
	frob(&avar);
	puts(avar);
}
frob(string &str) {
	str = "bar";
}
#lang tcl
scope_1_0
} -output "bar\n";

test scope-1.1 {a block introduces a new scope} -body {
#lang L
scope_1_1() {
	{
		int a;
		a = 5;
	}
	puts(a);
}
#lang tcl
scope_1_1
} -returnCodes {error} -match glob -result "*:6: L Error: Undeclared variable: a\n"

test regexp-1.0 {regexps might start with a dash, so call regex/regsub with -- before the regexp} -body {
#lang L
string v = "a-b-c";
v =~ s/-/\\&ndash;/g;
puts(v);
#lang tcl
} -output "a&ndash;b&ndash;c\n"

test errors-1.0 {don't run L code if there were compilation errors} -body {
#lang L
foo() {
	int argc;
	// we want "this is text" to _not_ print
	puts("this is text");
	puts(argc[1]);
}
foo();
#lang tcl
} -returnCodes {error} -match glob -result "*:5: L Error: Index into something that's not an array\n" \
-output {}

test break-1.0 {breaks break when loop jump instructions grow because the loop body is big} -body {
#lang L
foo() {
        int     i;

	for (i = 0; i<10; i++) {
		printf("${i}");
		printf("${i}");
		printf("${i}");
		printf("${i}");
		printf("${i}");
		break;
	}
}
foo();
#lang tcl
} -output {00000}

# cleanup
::tcltest::cleanupTests
return
